#!/bin/bash

# Usage: ./update-python-dependencies
# Run periodically to keep Python application, test, and development
# requirements up-to-date.

set -eC

WORKING_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
declare -r WORKING_DIR
declare -r VENV='review_env'
declare -ra REQUIREMENTS_FILE_PREFIXES=('securedrop' 'test' 'develop')

# This script should not be run with an active virtualenv. Calling deactivate
# does not work reliably, so instead we quit with an error message.
if [[ -n "${VIRTUAL_ENV}" ]]; then
  printf '\nERROR: Please deactivate your virtualenv then re-run this script.\n'
  exit 1
fi

# If pip and virtualenv are not available, try to install them with apt-get. If
# apt-get is not available, quit with an error message.
if ! command -v virtualenv > /dev/null || ! command -v pip > /dev/null; then
  if command -v apt-get > /dev/null; then
    sudo apt-get -qq install python-virtualenv python-pip
  else
    printf '\nERROR: Virtualenv and pip must be installed to run this script.\n'
    exit 1
  fi
fi

pushd "${WORKING_DIR}"
# Create a temporary virtualenv for the SecureDrop Python packages in our
# requirements directory and make sure it's cleaned up on exit.
trap 'rm -rf "${VENV}" && popd' EXIT

virtualenv -p python2 "${VENV}"
# shellcheck disable=SC1090
source "${VENV}"/bin/activate
pip install -U pip-tools

# Compile new requirements (.txt) files from our top-level dependency (.in)
# files (see http://nvie.com/posts/better-package-management/).
for prefix in "${REQUIREMENTS_FILE_PREFIXES[@]}"; do
  pip-compile -U -o "${prefix}"-requirements.txt "${prefix}"-requirements.in
done
