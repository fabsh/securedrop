#!/usr/bin/env ansible-playbook

- name: Destroy docker CI containers.
  hosts: localhost
  become: no
  tasks:
    - name: Destroy applicable containers.
      docker_container:
        name: "{{ item }}"
        state: absent
      with_items: "{{ docker_instances }}"
  vars:
    ci_environment: "{{ ansible_env.CI_SD_ENV | mandatory }}"
  vars_files:
    - "../vars/{{ ci_environment }}.yml"

- name: Destroy temporary CI hosts.
  hosts: localhost
  become: no
  gather_facts: true
  tasks:
    - name: Store job_id (job name and build number) as host fact.
      set_fact:
        job_id: "{{ aws_ec2_ci_tags.job_name }}-{{ aws_ec2_ci_tags.build_num }}"

    - name: Find EC2 instances by BUILD_NUM tag.
      ec2_remote_facts:
        region: "{{ aws_ec2_ci_region }}"
        filters:
          instance-state-name: running
          "tag:job_name": "{{ aws_ec2_ci_tags.job_name }}"
          "tag:build_num": "{{ aws_ec2_ci_tags.build_num }}"
      register: ec2_current_reg

    - name: Destroy found EC2 instances.
      ec2:
        region: "{{ aws_ec2_ci_region }}"
        state: absent
        instance_ids: "{{ ec2_current_reg.instances | map(attribute='id') | list  }}"
      when: "ec2_current_reg.instances != []"

    - name: Remove temporary SSH key from AWS region.
      ec2_key:
        name: "sdci-{{ job_id }}"
        state: absent
        region: "{{ aws_ec2_ci_region }}"

    - name: Remove temporary custom security group from AWS region.
      ec2_group:
        name: "{{ job_id }}"
        description: Temporary rules for CI
        state: absent
        region: "{{ aws_ec2_ci_region }}"
      register: ec2_group_result
      until: "'group_id' in ec2_group_result"
      retries: 6
      delay: "{{ aws_ec2_teardown_timeout }}"

    - name: Clean up temporary local SSH config items.
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ ansible_user_dir }}/.ssh/{{ job_id }}"
        - "{{ ansible_user_dir }}/.ssh/{{ job_id }}.pub"
        - "{{ ansible_user_dir }}/.ssh/sshconfig-{{ job_id }}"
  vars:
    aws_ec2_ci_region: "{{ ansible_env.CI_AWS_REGION | default('us-west-1') }}"
    aws_ec2_ci_tags:
      job_name: "securedrop-ci"
      build_num: "{{ ansible_env.BUILD_NUM | mandatory }}"
    aws_ec2_teardown_timeout: 50
